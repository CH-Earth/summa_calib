#!/usr/bin/env python
# coding: utf-8

# #### Update summa parameter values based on Ostrich generated multiplier values
# 1. Read input and output arguments from control_active.txt.
# 2. Read summa param names and multiplier values.
# 3. Update summa param values.
# Note: summa parameter names are different from multiplier names.

# import module
import os
import numpy as np
import shutil, sys
import netCDF4 as nc
import argparse

def process_command_line():
    '''Parse the commandline'''
    parser = argparse.ArgumentParser(description='Script to update summa trialParam.nc based on new multipler values.')
    parser.add_argument('controlFile', help='path of the overall control file.')
    args = parser.parse_args()
    return(args)

def read_from_control(control_file, setting):
    ''' Function to extract a given setting from the controlFile.'''      
    # Open 'control_active.txt' and locate the line with setting
    with open(control_file) as ff:
        for line in ff:
            line = line.strip()
            if line.startswith(setting):
                break
    # Extract the setting's value
    substring = line.split('|',1)[1].split('#',1)[0].strip() 
    # Return this value    
    return substring

def read_from_summa_route_config(control_file, setting):
    '''Function to extract a given setting from the summa or mizuRoute configuration file.'''
    # Open fileManager.txt or route_control and locate the line with setting
    with open(control_file) as ff:
        for line in ff:
            line = line.strip()
            if line.startswith(setting):
                break
    # Extract the setting's value
    substring = line.split('!',1)[0].strip().split(None,1)[1].strip("'")
    # Return this value    
    return substring

# main
if __name__ == '__main__':
    
    # an example: python 5a_update_paramTrial.py ../control_active.txt

    # ---------------------------- Preparation -------------------------------
    # Process command line  
    # Check args
    if len(sys.argv) != 2:
        print("Usage: %s <control_file>" % sys.argv[0])
        sys.exit(0)
    # Otherwise continue
    args = process_command_line()    
    control_file = args.controlFile
    
    # Read calibration path from controlFile
    calib_path = read_from_control(control_file, 'calib_path')

    # Read hydrologic model path from controlFile
    model_path = read_from_control(control_file, 'model_path')
    if model_path == 'default':
        model_path = os.path.join(calib_path, 'model')

    # Identify summa setting path and fileManager.
    summa_settings_path = os.path.join(model_path, read_from_control(control_file, 'summa_settings_relpath'))
    summa_filemanager   = os.path.join(summa_settings_path, read_from_control(control_file, 'summa_filemanager'))
    
    # -----------------------------------------------------------------------

    # # #### 1. Read input and output arguments
    # User can define the list of summa & mizuRoute parameters that are directly calibrated, not through multipliers.
    # By default, all summa & mizuRoute parameters are calibraetd through multipliers, so the list is empty.
    direct_param_list = ['']  

    # Identify the multiplier template and value files generated by 4_create_ostIn.py.
    multp_tpl = os.path.join(calib_path, 'multipliers.tpl')
    multp_txt = os.path.join(calib_path, 'multipliers.txt')

    # Identify the summa param file and a priori param file
    trialParamFile = read_from_summa_route_config(summa_filemanager, 'trialParamFile')
    trialParamFile = os.path.join(summa_settings_path, trialParamFile)
    trialParamFile_priori = trialParamFile.split('.nc')[0] + '.priori.nc'  # a priori param file
    trialParamFile_priori = os.path.join(summa_settings_path, trialParamFile_priori)

    # #### 2. Read summa param names and multiplier values
    multp_names  = list(np.loadtxt(multp_tpl, dtype='str'))
    multp_values = list(np.loadtxt(multp_txt))
    multp_num    = len(multp_names)

    # #### 3. Update summa param values
    # Copy trialParamFile_priori to be the base of trialParamFile.
    shutil.copy(trialParamFile_priori, trialParamFile)

    # Update param values in trialParamFile.
    with nc.Dataset(trialParamFile_priori, 'r') as src:
        with nc.Dataset(trialParamFile, 'r+') as dst:

            for i in range(multp_num):
                param_name = multp_names[i].replace('_multp','') # parameter name used in summa trialParam.nc

                # Update all params except 'thickness'
                if (param_name != 'thickness') and param_name in dst.variables.keys():  

                    # Update param values
                    if not param_name in direct_param_list:                             # new_value = multipler * default_value
                        param_priori_ma    = src.variables[param_name][:]               # priori param value mask array 
                        param_update_value = param_priori_ma.data * multp_values[i]     # update param value mask array
                        dst.variables[param_name][:] = np.ma.array(param_update_value, \
                                                                   mask=np.ma.getmask(param_priori_ma), \
                                                                   fill_value=param_priori_ma.get_fill_value())
                    elif param_name in direct_param_list:                                          # new_value = Ostrich value
                        param_priori_ma    = src.variables[param_name][:]                          # priori param value mask array 
                        param_update_value = np.ones_like(param_priori_ma.data) * multp_values[i]  # update param value mask array
                        dst.variables[param_name][:] = np.ma.array(param_update_value, \
                                                                   mask=np.ma.getmask(param_priori_ma), \
                                                                   fill_value=param_priori_ma.get_fill_value())                   

#                     # If param is 'theta_sat', update other four soil variables using a priori param value fractions.
#                     if param_name == 'theta_sat':
#                         param_priori_ma  = src.variables[param_name][:]
#                         param_ma = dst.variables[param_name][:]

#                         for add_param in ['theta_res', 'critSoilWilting', 'critSoilTranspire', 'fieldCapacity']:
#                             add_param_priori_ma  = src.variables[add_param][:]
#                             fraction =  np.divide(add_param_priori_ma.data, param_priori_ma.data) # fraction based on priori variable values
#                             add_param_update_value = param_ma.data * fraction
#                             dst.variables[add_param][:]= np.ma.array(add_param_update_value, \
#                                                                      mask=np.ma.getmask(add_param_priori_ma), \
#                                                                      fill_value=add_param_priori_ma.get_fill_value())
                
                # Exist code if this parameter does not exist in trialParam.nc.
                elif (param_name != 'thickness') and not (param_name in dst.variables.keys()):
                    print('Unable to update parameter %s beucase it does not exist in trialParam.nc'%(param_name))
                    sys.exit(0)
                    
                    
            # Update 'thickness' if it exists in multp_names.
            # 'thickness' is used to calculate TopCanopyHeight. TopCanopyHeight = heightCanopyBottom + thickness.
            # 'thickness' is updated after heightCanopyBottom is updated in the above loop.
            if 'thickness_multp' in multp_names:
                # Get the index of 'thickness_multp' in multp_names.
                thick_idx = multp_names.index('thickness_multp')

                # Get a priori thickness and updated heightCanopyBottom
                canopyTop_priori_ma    = src.variables['heightCanopyTop'][:]                      # a priori TopCanopyHeight mask array 
                canopyBottom_priori_ma = src.variables['heightCanopyBottom'][:]                   # a priori BottomCanopyHeight mask array 
                thickness_priori       = canopyTop_priori_ma.data-canopyBottom_priori_ma.data     # a priori canopy thickness
                
                canopyBottom_ma        = dst.variables['heightCanopyBottom'][:]                   # updated BottomCanopyHeight mask array
                
                # Update heightCanopyTop
                canopyTop_update_value = canopyBottom_ma.data + thickness_priori*multp_values[thick_idx]  # update TopCanopyHeight values
                dst.variables['heightCanopyTop'][:] = np.ma.array(canopyTop_update_value, \
                                                                  mask=np.ma.getmask(canopyTop_priori_ma), \
                                                                  fill_value=canopyTop_priori_ma.get_fill_value())
